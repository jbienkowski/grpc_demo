# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import grpc_demo_pb2 as grpc__demo__pb2


class SeismoServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SeismoPing = channel.unary_unary(
            "/seismo.SeismoService/SeismoPing",
            request_serializer=grpc__demo__pb2.SeismoPingRequest.SerializeToString,
            response_deserializer=grpc__demo__pb2.SeismoPingReply.FromString,
        )
        self.BiggestEventInDays = channel.unary_unary(
            "/seismo.SeismoService/BiggestEventInDays",
            request_serializer=grpc__demo__pb2.BiggestEventInDaysRequest.SerializeToString,
            response_deserializer=grpc__demo__pb2.BiggestEventReply.FromString,
        )
        self.BiggestEventOn = channel.unary_unary(
            "/seismo.SeismoService/BiggestEventOn",
            request_serializer=grpc__demo__pb2.BiggestEventOnRequest.SerializeToString,
            response_deserializer=grpc__demo__pb2.BiggestEventReply.FromString,
        )


class SeismoServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SeismoPing(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BiggestEventInDays(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BiggestEventOn(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SeismoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SeismoPing": grpc.unary_unary_rpc_method_handler(
            servicer.SeismoPing,
            request_deserializer=grpc__demo__pb2.SeismoPingRequest.FromString,
            response_serializer=grpc__demo__pb2.SeismoPingReply.SerializeToString,
        ),
        "BiggestEventInDays": grpc.unary_unary_rpc_method_handler(
            servicer.BiggestEventInDays,
            request_deserializer=grpc__demo__pb2.BiggestEventInDaysRequest.FromString,
            response_serializer=grpc__demo__pb2.BiggestEventReply.SerializeToString,
        ),
        "BiggestEventOn": grpc.unary_unary_rpc_method_handler(
            servicer.BiggestEventOn,
            request_deserializer=grpc__demo__pb2.BiggestEventOnRequest.FromString,
            response_serializer=grpc__demo__pb2.BiggestEventReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "seismo.SeismoService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class SeismoService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SeismoPing(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/seismo.SeismoService/SeismoPing",
            grpc__demo__pb2.SeismoPingRequest.SerializeToString,
            grpc__demo__pb2.SeismoPingReply.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BiggestEventInDays(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/seismo.SeismoService/BiggestEventInDays",
            grpc__demo__pb2.BiggestEventInDaysRequest.SerializeToString,
            grpc__demo__pb2.BiggestEventReply.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BiggestEventOn(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/seismo.SeismoService/BiggestEventOn",
            grpc__demo__pb2.BiggestEventOnRequest.SerializeToString,
            grpc__demo__pb2.BiggestEventReply.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
